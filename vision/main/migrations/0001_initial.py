# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2018-08-21 06:16
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Activity Title')),
                ('venue', models.TextField(blank=True, null=True, verbose_name='Venue')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('is_event', models.BooleanField(default=False, verbose_name='Is it an event?')),
                ('poster', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
            ],
        ),
        migrations.CreateModel(
            name='AskTeacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=b'', editable=False, max_length=200, null=True, verbose_name='Name')),
                ('email_id', models.EmailField(editable=False, max_length=254, verbose_name='Email')),
                ('question', models.TextField(blank=True, null=True, verbose_name="What's your question")),
                ('datetime', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_present', models.BooleanField(default=False)),
                ('is_manual', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceOTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(blank=True, max_length=300, null=True, verbose_name='OTP')),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('is_expired', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='BookImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
            ],
        ),
        migrations.CreateModel(
            name='BookRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_denied', models.BooleanField(default=False)),
                ('denied_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BookUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Book Title')),
                ('no_of_pages', models.IntegerField(blank=True, null=True, verbose_name='Total No of Pages')),
                ('edition', models.CharField(blank=True, max_length=200, null=True, verbose_name='Edition')),
                ('pub_year', models.IntegerField(blank=True, null=True, verbose_name='Published Year')),
                ('is_novel', models.BooleanField(default=False, verbose_name='Novel?')),
                ('is_pd_stuff', models.BooleanField(default=False, verbose_name='Personality Development Stuff?')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_ques_paper', models.BooleanField(default=False, verbose_name='Is Question Paper?')),
                ('is_study_material', models.BooleanField(default=False, verbose_name='Is Study Material?')),
                ('ques_paper_year', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ques Paper Year')),
                ('pdf_first_uploaded', models.DateTimeField(blank=True, null=True)),
                ('book_cover', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('isb_no', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='ISB Number')),
                ('price', models.IntegerField(blank=True, null=True, verbose_name='Price')),
                ('branch', models.CharField(blank=True, choices=[(b'B00', b'Civil Engineering'), (b'B07', b'Mining Engineering'), (b'B10', b'Computer Science & Engineering'), (b'B11', b'Computer Science'), (b'B12', b'Comp. Engineering & Information Technology'), (b'B13', b'Information Technology'), (b'B14', b'Master of Computer Application'), (b'B15', b'Computer Engineering'), (b'B16', b'Information Science'), (b'B20', b'Electrical Engineering'), (b'B21', b'Electrical & Electronics Engineering'), (b'B22', b'Instrumentation & Control Engineering'), (b'B23', b'Instrumentation Engineering'), (b'B30', b'Electronics Engineering'), (b'B31', b'Electronics & Communication Engineering'), (b'B32', b'Electronics & Instrumentation Engineering'), (b'B33', b'Electronics & Telecommunication Engineering'), (b'B34', b'Electronics, Instrumentation & Controll Engineering'), (b'B35', b'Applied Electronics & Instrumentation Engineering'), (b'B40', b'Mechanical Technology'), (b'B41', b'Manufacturing Technology'), (b'B42', b'Metallurgical Engineering'), (b'B43', b'Mechanical & Industrial Engineering'), (b'B44', b'Production Engineering'), (b'B45', b'Industrial & Production Engineering'), (b'B46', b'Production & Industrial Engineering'), (b'B50', b'Bachelor of Pharmacy'), (b'B51', b'Chemical Engineering'), (b'B52', b'Bio-Chemical Engineering'), (b'B53', b'Chemical & Alcohol Technology'), (b'B54', b'Bio-Technology'), (b'B55', b'Chemical & Bio Engg,'), (b'B60', b'Textile Chemistry'), (b'B61', b'Textile Technology'), (b'B62', b'Man-made Fibre Technology'), (b'B63', b'Textile Engineering'), (b'B64', b'Carpet Technology'), (b'B65', b'Bachelor of Fashion & Apparel Design (BFAD)'), (b'B70', b'MBA'), (b'B72', b'MBA (Rural Development)'), (b'B74', b'BHMCT'), (b'B80', b'Agricultural Engineering'), (b'B81', b'Architecture'), (b'B82', b'Food Technology & Engineering'), (b'B83', b'Sugar Technology'), (b'B84', b'Oil Technology'), (b'B85', b'Paint Technology'), (b'B86', b'Leather Technology'), (b'B87', b'Plastic Technology'), (b'B88', b'Ceramic Technology'), (b'B89', b'Agriculture Engineering')], default=b'', max_length=10, null=True, verbose_name='Category')),
                ('is_excluded', models.BooleanField(default=False, verbose_name='Exclude')),
            ],
            options={
                'verbose_name_plural': 'Uploads Summary',
            },
        ),
        migrations.CreateModel(
            name='BookWriter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('writer_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Writer Name')),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Name')),
                ('branch_code', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Code')),
            ],
            options={
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=200, null=True, verbose_name='Category Title')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='City')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Course Name')),
                ('duration', models.CharField(blank=True, choices=[(b'sem', b'Semester'), (b'year', b'Year')], default=b'', max_length=10, null=True, verbose_name='Duration')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('fax', models.CharField(blank=True, max_length=200, null=True, verbose_name='Fax')),
                ('website', models.CharField(blank=True, max_length=200, null=True, verbose_name='Website')),
                ('f_name', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='First Name')),
                ('l_name', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='Last Name')),
                ('gender', models.CharField(blank=True, choices=[(b'1', b'Male'), (b'2', b'Female'), (b'3', b'Others')], default=b'', max_length=10, null=True, verbose_name='Gender')),
                ('teacher_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='Teacher ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Currently Working?')),
                ('coorporate_address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=200, null=True, verbose_name='Phone')),
                ('email', models.CharField(blank=True, max_length=200, null=True, verbose_name='Email ID')),
                ('skype', models.CharField(blank=True, max_length=200, null=True, verbose_name='Skype')),
                ('yt_access_token', models.CharField(blank=True, max_length=200, null=True, verbose_name='YouTube Access Token')),
                ('yt_refresh_token', models.CharField(blank=True, max_length=200, null=True, verbose_name='YouTube Refresh Token')),
            ],
            options={
                'verbose_name_plural': 'Faculty',
            },
        ),
        migrations.CreateModel(
            name='FeedBack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='Name')),
                ('email_id', models.EmailField(max_length=254, verbose_name='Email')),
                ('subject', models.CharField(blank=True, default=b'', max_length=1000, null=True, verbose_name='Subject')),
                ('body', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Game Title')),
                ('source', models.CharField(blank=True, max_length=200, null=True, verbose_name='Game Source')),
                ('source_link', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Game Source Link')),
                ('embed_code', models.TextField(blank=True, null=True)),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Institute Name')),
                ('logo', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('is_allow_attendance_within_campus', models.BooleanField(default=True, verbose_name='Allow within Radius?')),
                ('campus_radius', models.IntegerField(blank=True, null=True, verbose_name='Campus Radius (in mtrs)')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='main.Course')),
            ],
        ),
        migrations.CreateModel(
            name='NoAppRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_agent', models.CharField(blank=True, max_length=300, null=True, verbose_name='User Agent')),
                ('ip_address', models.CharField(blank=True, max_length=50, null=True, verbose_name='IP Address')),
                ('url_accessed', models.CharField(blank=True, max_length=50, null=True, verbose_name='URL')),
                ('datetime_attempted', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Activity Title')),
                ('venue', models.TextField(blank=True, null=True, verbose_name='Venue')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('summary', models.TextField(blank=True, editable=False, null=True, verbose_name='Summary')),
                ('upload', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('for_staff_only', models.BooleanField(default=False, editable=False, verbose_name='For Staff Only?')),
                ('for_individual', models.BooleanField(default=False, editable=False, verbose_name='For Individual?')),
                ('object_id', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('is_live', models.BooleanField(default=True, verbose_name='Live?')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('icon_class', models.CharField(blank=True, max_length=200, null=True, verbose_name='Icon Class')),
                ('notification_type', models.CharField(blank=True, choices=[(b'1', b'Class Update'), (b'2', b'Campus Update')], max_length=10, null=True, verbose_name='Notification Type')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationRead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
                ('notification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='read_notifications', to='main.Notification')),
                ('read_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SavedNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Note Title')),
                ('x1', models.CharField(blank=True, max_length=100, null=True, verbose_name='Coordinate X1')),
                ('x2', models.CharField(blank=True, max_length=100, null=True, verbose_name='Coordinate X2')),
                ('y1', models.CharField(blank=True, max_length=100, null=True, verbose_name='Coordinate Y1')),
                ('y2', models.CharField(blank=True, max_length=100, null=True, verbose_name='Coordinate Y1')),
                ('width', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image width(when note was taken)')),
                ('height', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image height(when note was taken)')),
                ('page_no', models.CharField(blank=True, max_length=100, null=True, verbose_name='Page No')),
                ('image', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.BookUpload')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentLiveClassAcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_expires', models.DateTimeField(blank=True, help_text='Access will be expired after this time. Default: Today at 11:59:59PM. Leave blank for default value.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentLiveEventCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('last_record_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentTeacherConversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_teacher_reply', models.BooleanField(default=False)),
                ('text', models.TextField(blank=True, null=True, verbose_name="What's your reply")),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.AskTeacher')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('subject_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Subject Name')),
                ('subject_code', models.CharField(blank=True, max_length=200, null=True, verbose_name='Subject Code')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='branch', to='main.Branch')),
                ('course_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subject_courses', to='main.Course')),
                ('institute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Institute')),
            ],
        ),
        migrations.CreateModel(
            name='TableContents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_no', models.IntegerField(blank=True, null=True, verbose_name='Chapter No')),
                ('chapter_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Chapter name')),
                ('sub_heading_no', models.IntegerField(blank=True, null=True, verbose_name='Heading No')),
                ('sub_heading_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Sub Heading Title')),
                ('page_no', models.IntegerField(blank=True, null=True, verbose_name='Page No')),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.BookUpload')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_head', to='main.TableContents')),
            ],
            options={
                'verbose_name_plural': 'Table Contents',
            },
        ),
        migrations.CreateModel(
            name='TimeTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('weekday', models.IntegerField(blank=True, choices=[(0, b'Monday'), (1, b'Tuesday'), (2, b'Wednesday'), (3, b'Thursday'), (4, b'Friday'), (5, b'Saturday'), (6, b'Sunday')], null=True)),
                ('time_start', models.TimeField(blank=True, null=True)),
                ('time_end', models.TimeField(blank=True, null=True)),
                ('class_type', models.CharField(choices=[(b'1', b'Lecture'), (b'2', b'Tutorial'), (b'3', b'Lab'), (b'4', b'Others'), (b'5', b'Lunch Break'), (b'6', b'Break')], default=b'1', max_length=10, verbose_name='Class Type')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name=b'Start Date')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name=b'End Date')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tt_branch', to='main.Branch')),
                ('course_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tt_course', to='main.Course')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Institute')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tt_subject', to='main.Subject')),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='University Name')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.City')),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='Achievement Title')),
                ('description', models.CharField(blank=True, default=b'', max_length=512, null=True, verbose_name='Achievement Description')),
                ('achievement_date', models.DateField(blank=True, null=True, verbose_name=b'Date of Achievement')),
            ],
        ),
        migrations.CreateModel(
            name='UserEducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_type', models.CharField(blank=True, choices=[(b'1', b'High School'), (b'2', b'Intermediate')], default=b'', max_length=10, null=True, verbose_name='Education')),
                ('description', models.CharField(blank=True, default=b'', max_length=512, null=True, verbose_name='Achievement Description')),
                ('from_date', models.DateField(blank=True, null=True, verbose_name=b'From Date')),
                ('to_date', models.DateField(blank=True, null=True, verbose_name=b'To Date')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='First Name')),
                ('l_name', models.CharField(blank=True, default=b'', max_length=200, null=True, verbose_name='Last Name')),
                ('gender', models.CharField(blank=True, choices=[(b'1', b'Male'), (b'2', b'Female'), (b'3', b'Others')], default=b'', max_length=10, null=True, verbose_name='Gender')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('email_id', models.EmailField(max_length=254, verbose_name='Email')),
                ('dob', models.DateField(blank=True, null=True, verbose_name=b'Date of Birth')),
                ('enrollment_no', models.CharField(blank=True, max_length=200, null=True, verbose_name='Enrollment No')),
                ('profile_img', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('is_live', models.BooleanField(default=True, verbose_name='Make it live?')),
                ('contact', models.CharField(blank=True, max_length=10, null=True, verbose_name='Contact Number')),
                ('hobbies', models.TextField(blank=True, default=b'', max_length=512, null=True, verbose_name='Hobbies')),
                ('fav_games', models.TextField(blank=True, default=b'', max_length=512, null=True, verbose_name='Favourite Games')),
                ('about_me', models.TextField(blank=True, default=b'', max_length=512, null=True, verbose_name='About Me')),
                ('is_access_blocked', models.BooleanField(default=False)),
                ('last_read_notification', models.DateTimeField(blank=True, null=True)),
                ('is_facerecog_enabled', models.BooleanField(default=False)),
                ('institute_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Institute Name')),
                ('institute_logo', models.FileField(blank=True, null=True, upload_to=b'/private/var/live_code/vision/vision/uploads')),
                ('institute_city', models.CharField(blank=True, max_length=200, null=True, verbose_name='Institute City')),
                ('is_demo_user', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='last seen')),
                ('last_seen_friend_list', models.DateTimeField(blank=True, null=True)),
                ('last_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last ip')),
                ('topic_count', models.PositiveIntegerField(default=0, verbose_name='topic count')),
                ('comment_count', models.PositiveIntegerField(default=0, verbose_name='comment count')),
                ('last_post_hash', models.CharField(blank=True, max_length=32, verbose_name='last post hash')),
                ('last_post_on', models.DateTimeField(blank=True, null=True, verbose_name='last post on')),
                ('is_moderator', models.BooleanField(default=True, verbose_name='moderator status')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_branch', to='main.Branch')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Course')),
                ('current_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_current_city', to='main.City')),
                ('institute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_institute', to='main.Institute')),
                ('native_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_home_city', to='main.City')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('is_mobile', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(auto_now=True, null=True)),
                ('is_logged_out', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeLiveEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Event Title')),
                ('description', models.TextField(blank=True)),
                ('yt_dump', models.TextField(blank=True)),
                ('embed_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Embed Code')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('is_draft', models.BooleanField(default=False, help_text='Can make it live Later! Users will not see this record until this checkbox is checked.', verbose_name='Draft? ')),
                ('is_public', models.BooleanField(default=False, verbose_name='Make it public?')),
                ('is_access_given', models.BooleanField(default=False, help_text='This will be visible to students in Old events Section. Uncheck to Revoke! Make sure that the Event is in Draft Mode!', verbose_name='Give Access to All Students?')),
                ('access_expires', models.DateTimeField(blank=True, help_text='Access will be expired after this time. Default: Today at 11:59:59PM. Leave blank for default value.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('channel_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Channel ID')),
                ('sem_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'10'), (b'11', b'11'), (b'12', b'12')], default=b'', max_length=10, null=True, verbose_name='Semester')),
                ('year_no', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4')], default=b'', max_length=10, null=True, verbose_name='Year')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='yt_branch', to='main.Branch')),
                ('course_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='yt_course', to='main.Course')),
                ('institute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Institute')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='yt_subject', to='main.Subject')),
            ],
        ),
        migrations.AddField(
            model_name='usereducation',
            name='userprofile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to='main.UserProfile'),
        ),
        migrations.AddField(
            model_name='userachievement',
            name='userprofile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='achivement_user_profile', to='main.UserProfile'),
        ),
        migrations.AddField(
            model_name='studentliveeventcount',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.YouTubeLiveEvent'),
        ),
        migrations.AddField(
            model_name='studentliveeventcount',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='studentliveclassacess',
            name='class_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.YouTubeLiveEvent'),
        ),
        migrations.AddField(
            model_name='studentliveclassacess',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.UserProfile'),
        ),
        migrations.AddField(
            model_name='notification',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_category', to='main.NotificationCategory'),
        ),
        migrations.AddField(
            model_name='notification',
            name='content_type',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='notification',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faculty_notification', to='main.Faculty'),
        ),
        migrations.AddField(
            model_name='notification',
            name='individual_user',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='institute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='institute_to_notify', to='main.Institute'),
        ),
        migrations.AddField(
            model_name='institute',
            name='university',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.University'),
        ),
        migrations.AddField(
            model_name='faculty',
            name='institute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Institute'),
        ),
        migrations.AddField(
            model_name='faculty',
            name='subject',
            field=models.ManyToManyField(blank=True, related_name='subject_faculty', to='main.Subject', verbose_name=b'Subject Faculty'),
        ),
        migrations.AddField(
            model_name='faculty',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='facultyprofile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='institute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='institute', to='main.Institute'),
        ),
        migrations.AddField(
            model_name='branch',
            name='institute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Institute'),
        ),
        migrations.AddField(
            model_name='bookupload',
            name='book_writer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.BookWriter'),
        ),
        migrations.AddField(
            model_name='bookupload',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='novel_category', to='main.Category'),
        ),
        migrations.AddField(
            model_name='bookupload',
            name='subject',
            field=models.ManyToManyField(blank=True, related_name='subject_books', to='main.Subject'),
        ),
        migrations.AddField(
            model_name='bookupload',
            name='uploads',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.BookImage'),
        ),
        migrations.AddField(
            model_name='bookrequest',
            name='book',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.BookUpload'),
        ),
        migrations.AddField(
            model_name='bookrequest',
            name='institute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Institute'),
        ),
        migrations.AddField(
            model_name='attendanceotp',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Faculty'),
        ),
        migrations.AddField(
            model_name='attendanceotp',
            name='timetable',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.TimeTable'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_faculty', to='main.Faculty'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='otp_validated',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_otp', to='main.AttendanceOTP'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='attendance',
            name='timetable',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_timetable', to='main.TimeTable'),
        ),
        migrations.AddField(
            model_name='askteacher',
            name='student',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student', to='main.UserProfile'),
        ),
        migrations.AddField(
            model_name='askteacher',
            name='teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to='main.Faculty'),
        ),
    ]
